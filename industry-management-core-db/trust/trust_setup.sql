DROP SCHEMA TENANT_TRUST_CONFIG CASCADE;
DROP USER <restricted_user_name>;

CREATE RESTRICTED USER <restricted_user_name> PASSWORD <password_for_restricted_user> NO FORCE_FIRST_PASSWORD_CHANGE;
ALTER USER <restricted_user_name> ENABLE CLIENT CONNECT;
CREATE SCHEMA TENANT_TRUST_CONFIG OWNED BY SYSTEM;
SET SCHEMA TENANT_TRUST_CONFIG;

CREATE PROCEDURE XSAPPUSER_ADD_TRUST (IN PseName NVARCHAR (256), IN CertId BIGINT)
LANGUAGE SQLSCRIPT SQL SECURITY DEFINER AS
varCounter INTEGER := 0;
BEGIN
  DECLARE varStatement NVARCHAR (256);
  varStatement := 'ALTER PSE ' || :PseName || ' ADD CERTIFICATE ' || :CertId;
  EXEC :varStatement;
END;

CREATE PROCEDURE XSAPPUSER_ALTER_PROVIDER (IN SUBACCOUNTID NVARCHAR (256), IN SUBACCOUNTNAME NVARCHAR(256))
LANGUAGE SQLSCRIPT SQL SECURITY DEFINER AS
varCounter INTEGER := 0;
BEGIN
  DECLARE ERROR_INVALID_USER CONDITION FOR SQL_ERROR_CODE 10332;
  DECLARE varStatement NVARCHAR (1000);
  DECLARE varIssuer NVARCHAR(1024);
  varIssuer := '''http://' || :SUBACCOUNTNAME || '.localhost:8080/uaa/oauth/token''';
  SELECT COUNT(VIEW_NAME) INTO varCounter FROM SYS.VIEWS WHERE VIEW_NAME = 'JWT_PROVIDERS';
  IF (:varCounter = 0) THEN
     varStatement := '';
  ELSE
     varStatement := 'ALTER JWT PROVIDER JWTPROVIDER_' || :SUBACCOUNTID || ' SET ISSUER ' || :varIssuer || ' CLAIM ''user_name'' AS EXTERNAL IDENTITY';
     EXEC :varStatement;
  END IF;
END;

CREATE PROCEDURE XSAPPUSER_DROP_PROVIDER (IN SUBACCOUNTID NVARCHAR (256))
LANGUAGE SQLSCRIPT SQL SECURITY DEFINER AS
varCounter INTEGER := 0;
BEGIN
  DECLARE ERROR_INVALID_USER CONDITION FOR SQL_ERROR_CODE 10332;
  DECLARE varStatement NVARCHAR (1000);
  SELECT COUNT(VIEW_NAME) INTO varCounter FROM SYS.VIEWS WHERE VIEW_NAME = 'JWT_PROVIDERS';
  IF (:varCounter = 0) THEN
     varStatement := '';
  ELSE
     varStatement := 'DROP JWT PROVIDER JWTPROVIDER_' || :SUBACCOUNTID;
     EXEC :varStatement;
  END IF;
END;

CREATE PROCEDURE XSAPPUSER_CREATECERT (IN DnName NVARCHAR (256), IN CertBlob NCLOB, OUT CertId BIGINT)
LANGUAGE SQLSCRIPT SQL SECURITY DEFINER AS
varCounter INTEGER := 0;
BEGIN
  DECLARE ERROR_INVALID_USER CONDITION FOR SQL_ERROR_CODE 10332;
  DECLARE varStatement NVARCHAR (9000);
  SELECT COUNT(*) INTO varCounter FROM CERTIFICATES WHERE SUBJECT_DISTINGUISHED_NAME = :DnName AND ISSUER_DISTINGUISHED_NAME = :DnName;
  IF (:varCounter = 0) THEN
--     varStatement := 'CREATE CERTIFICATE FROM ' || :CertBlob || ';
     varStatement := 'CREATE CERTIFICATE FROM ' || :CertBlob;
     EXEC :varStatement;
--      CREATE CERTIFICATE FROM :CertBlob;
  END IF;
  SELECT CERTIFICATE_ID INTO CertId FROM CERTIFICATES WHERE SUBJECT_DISTINGUISHED_NAME = :DnName AND ISSUER_DISTINGUISHED_NAME = :DnName;
END;

CREATE PROCEDURE XSAPPUSER_CREATE_PROVIDER (IN SUBACCOUNTID NVARCHAR (256), IN SUBACCOUNTNAME NVARCHAR(256))
LANGUAGE SQLSCRIPT SQL SECURITY DEFINER AS
varCounter INTEGER := 0;
BEGIN
  DECLARE ERROR_INVALID_USER CONDITION FOR SQL_ERROR_CODE 10332;
  DECLARE varStatement NVARCHAR (1000);
  DECLARE varIssuer NVARCHAR(1024);
  varIssuer := '''http://' || :SUBACCOUNTNAME || '.localhost:8080/uaa/oauth/token''';
  SELECT COUNT(VIEW_NAME) INTO varCounter FROM SYS.VIEWS WHERE VIEW_NAME = 'JWT_PROVIDERS';
  IF (:varCounter = 0) THEN
     varStatement := '';
  ELSE
     varStatement := 'CREATE JWT PROVIDER JWTPROVIDER_' || :SUBACCOUNTID || ' WITH ISSUER ' || :varIssuer || ' CLAIM ''user_name'' AS EXTERNAL IDENTITY';
     EXEC :varStatement;
  END IF;
END;

CREATE PROCEDURE XSAPPUSER_DELETE_TRUST (IN PseName NVARCHAR (256), IN CertId BIGINT)
LANGUAGE SQLSCRIPT SQL SECURITY DEFINER AS
varCounter INTEGER := 0;
BEGIN
  DECLARE varStatement NVARCHAR (256);
  SELECT COUNT(*) INTO varCounter FROM SYS.PSE_CERTIFICATES WHERE CERTIFICATE_ID = :CertId;
  IF (:varCounter > 0) THEN
     varStatement := 'ALTER PSE ' || :PseName || ' DROP CERTIFICATE ' || :CertId;
     EXEC :varStatement;
  END IF;
END;

CREATE PROCEDURE XSAPPUSER_GETCERT (IN DnName NVARCHAR (5000), OUT CertId BIGINT)
LANGUAGE SQLSCRIPT SQL SECURITY DEFINER AS
varCounter INTEGER := 0;
BEGIN
  DECLARE ERROR_INVALID_USER CONDITION FOR SQL_ERROR_CODE 10332;
  DECLARE varStatement NVARCHAR (9000);
  SELECT COUNT(*) INTO varCounter FROM SYS.CERTIFICATES WHERE SUBJECT_DISTINGUISHED_NAME = :DnName AND ISSUER_DISTINGUISHED_NAME = :DnName;
  IF (:varCounter = 0) THEN
     CertId := 0;
  ELSE
     SELECT CERTIFICATE_ID INTO CertId FROM SYS.CERTIFICATES WHERE SUBJECT_DISTINGUISHED_NAME = :DnName AND ISSUER_DISTINGUISHED_NAME = :DnName;
  END IF;
END;

CREATE PROCEDURE XSAPPUSER_GETPSE (IN InPurpose VARCHAR (24), OUT OutName NVARCHAR (256))
LANGUAGE SQLSCRIPT SQL SECURITY DEFINER AS
varCounter INTEGER := 0;
BEGIN
  DECLARE ERROR_INVALID_USER CONDITION FOR SQL_ERROR_CODE 10332;
  DECLARE varStatement NVARCHAR (256);
  SELECT COUNT(*) INTO varCounter FROM SYS.PSES WHERE PURPOSE = :InPurpose;
  IF (:varCounter = 0) THEN
    IF (:InPurpose = 'JWT') THEN
      OutName := 'SAPXSUAAJWT';
    ELSEIF (:InPurpose = 'SAML') THEN
      OutName := 'SAPXSUAASAML';
    ELSE
      OutName := 'SAPXSJWT';
    END IF;
    varStatement := 'CREATE PSE ' || :OutName;
    EXEC :varStatement;
    varStatement := 'SET PSE ' || :OutName || ' PURPOSE '  || :InPurpose;
    EXEC :varStatement;
  ELSE
      SELECT NAME INTO OutName FROM SYS.PSES WHERE PURPOSE = :InPurpose;
  END IF;
END;

CREATE PROCEDURE XSAPPUSER_CREATE_CERTIFICATE(IN Cert NCLOB)
LANGUAGE SQLSCRIPT SQL SECURITY DEFINER AS
BEGIN
  DECLARE ERROR_CERTIFICATE_PRESENT CONDITION FOR SQL_ERROR_CODE 5635;
  DECLARE ERROR_INVALID_USER CONDITION FOR SQL_ERROR_CODE 10332;
  DECLARE varStatement NVARCHAR (4096);
  varStatement := 'CREATE CERTIFICATE FROM ''' || TO_NVARCHAR(:Cert) || '''';
  EXEC :varStatement;  
END;

CREATE PROCEDURE XSAPPUSER_CREATE (IN InPurpose VARCHAR (24), IN DnName NVARCHAR (5000))
LANGUAGE SQLSCRIPT SQL SECURITY DEFINER AS
varCounter INTEGER := 0;
BEGIN
  DECLARE ERROR_INVALID_USER CONDITION FOR SQL_ERROR_CODE 10332;
  DECLARE certId BIGINT;
  DECLARE pseName NVARCHAR (256);
  CALL XSAPPUSER_GETPSE(:InPurpose , :pseName);
  CALL XSAPPUSER_GETCERT(:DnName, :certId);
  IF (:certId = 0) THEN
     CALL XSAPPUSER_CREATECERT(:DnName, :pseName, :certId);
  ELSE
     CALL XSAPPUSER_DELETE_TRUST(:pseName, :certId);
  END IF;
  CALL XSAPPUSER_ADD_TRUST(:pseName, :certId);
END;

CREATE PROCEDURE XSAPPUSER_DROP (IN InPurpose VARCHAR (24), IN DnName NVARCHAR (5000))
LANGUAGE SQLSCRIPT SQL SECURITY DEFINER AS
varCounter INTEGER := 0;
BEGIN
  DECLARE ERROR_INVALID_USER CONDITION FOR SQL_ERROR_CODE 10332;
  DECLARE certId BIGINT;
  DECLARE pseName NVARCHAR (256);
  DECLARE varStatement NVARCHAR (256);
  CALL XSAPPUSER_GETPSE(:InPurpose , :pseName);
  CALL XSAPPUSER_GETCERT(:DnName, :certId);
  IF (:certId > 0) THEN
     CALL XSAPPUSER_DELETE_TRUST(:pseName, :certId);
     varStatement := 'DROP CERTIFICATE ' || :CertId;
     EXEC :varStatement;
  END IF;
END;

GRANT EXECUTE ON SCHEMA TENANT_TRUST_CONFIG TO <restricted_user_name>;
-- GRANT TRUST ADMIN TO <restricted_user_name>;
-- GRANT ALL PRIVILEGES ON SCHEMA TENANT_TRUST_CONFIG TO <restricted_user_name>;
-- GRANT TRUST ADMIN TO <restricted_user_name>;
-- GRANT CERTIFICATE ADMIN TO <restricted_user_name>;
-- GRANT SELECT ON SYS.CERTIFICATES TO <restricted_user_name>;
-- GRANT SELECT ON SYS.PSE_CERTIFICATES TO <restricted_user_name>;
-- GRANT SELECT ON SYS.PSES TO <restricted_user_name>;
-- GRANT SELECT ON SYS.VIEWS TO <restricted_user_name>;